name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Syntax check
      run: |
        python -m py_compile app/*.py

    - name: Basic tests
      run: |
        python -c "import app.main; print('‚úÖ App imports successfully')"
        python -c "import app.models; print('‚úÖ Models import successfully')"
        python -c "import app.auth; print('‚úÖ Auth imports successfully')"

  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ascend-frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd ascend-frontend
        npm ci

    - name: Build frontend
      run: |
        cd ascend-frontend
        npm run build

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run basic security checks
      run: |
        echo "üîç Checking for common security issues..."
        # Check for .env files (should not exist)
        if find . -name ".env" -not -path "./venv/*" | grep -q .; then
          echo "‚ùå Found .env files in repository"
          exit 1
        else
          echo "‚úÖ No .env files found"
        fi
        
        # Check for hardcoded secrets
        if grep -r "password.*=" --include="*.py" app/ | grep -v "password_hash" | grep -v "verify_password"; then
          echo "‚ùå Potential hardcoded passwords found"
          exit 1
        else
          echo "‚úÖ No hardcoded passwords found"
        fi
        
        echo "‚úÖ Basic security checks passed"